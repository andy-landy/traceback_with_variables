Traceback with variables (most recent call last):
  File "...omitted for tests only.../test_core.py", line...omitted for tests only..., in check_
  >             f()
  .         except Exception:  # noqa
  .             tb_reg(core.format_exc(**kwargs))
  . 
  .     return check_
  . 
  . 
  . def test_replace():
  .     fmt = Format(
  .         max_value_str_len=1,
  .         objects_details=1,
  .         ellipsis_rel_pos=0.5,
  .         max_exc_str_len=1,
  .         ellipsis_='.',
  .         before=1,
  .         after=1,
  .         color_scheme=None,
  .         skip_files_except=[],
  .         brief_files_except=[],
  .         custom_var_printers=[],
  .     )
  .     fmt2 = fmt.replace(
  .         before=2,
  .         skip_files_except=['f1', 'f2'],
  .     )
  .     assert fmt.max_value_str_len == fmt.max_value_str_len
  .     assert fmt2.before == 2
  .     assert fmt.before == 1
  .     assert fmt2.skip_files_except == ['f1', 'f2']
  .     assert fmt.skip_files_except == []
  . 
  . 
  . def test_setattr():
  .     fmt = Format()
  .     fmt.max_value_str_len = 1
  .     fmt.objects_details = 1
  .     fmt.ellipsis_rel_pos = 0.5
  .     fmt.max_exc_str_len = 1
  .     fmt.ellipsis_ = '.'
  .     fmt.before = 1
  .     fmt.after = 1
  .     fmt.color_scheme = None
  .     fmt.skip_files_except = []
  .     fmt.brief_files_except = []
  .     fmt.custom_var_printers = []
  .     with pytest.raises(AttributeError):
  .         fmt.max_val_str_len = 1
  . 
  . 
  . def test_default(check):
  .     check()
  . 
  . 
  . def test_explicit_e(tb_reg):
  .     try:
  .         f()
  .     except Exception as e_:  # noqa
  .         e = e_
  . 
  .     tb_reg(core.format_exc(e=e))  # noqa
  . 
  . 
  . def test_no_e():
  .     try:
  .         f()
  .     except:  # noqa
  .         pass
  . 
  .     with pytest.raises(ValueError):
  .         core.format_exc()
  . 
  . 
  . # TODO def test_after_unhandled_e():
  . 
  . 
  . def test_ellipsis(check):
  .     check(fmt=Format(ellipsis_='*'))
  . 
  . 
  . def test_max_value_str_len(check):
  .     check(fmt=Format(max_value_str_len=100))
  . 
  . 
  . @pytest.mark.parametrize('obj', [[1, 2, 3], A(11, 12), A(A(11, 12), A(13, 14)), A(Unprintable(), 2)])
  . @pytest.mark.parametrize('objects_details', [0, 1, 10])
  . def test_objects_details(tb_reg, obj, objects_details):
  .     try:
  .         1/0
  .     except:
      kwargs = {'fmt': <traceback_with_variables.core.Format object at 0x...omitted for tests only...>}
      tb_reg = <bound method Reg.match_tb_text of <tests.test_utils.Reg object at 0x...omitted for tests only...>>
  File "...omitted for tests only.../dummies.py", line...omitted for tests only..., in f
  >             return f(
  .                 n
  . 
  .                 - 1
  .             )
      n = 10001
      s1 = 'short string with n: 10001'
      l1 = 'long string with 0..n: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 1...9951, 9952, 9953, 9954, 9955, 9956, 9957, 9958, 9959, 9960, 9961, 9962, 9963, 9964, 9965, 9966, 9967, 9968, 9969, 9970, 9971, 9972, 9973, 9974, 9975, 9976, 9977, 9978, 9979, 9980, 9981, 9982, 9983, 9984, 9985, 9986, 9987, 9988, 9989, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999, 10000'
      us = <exception while printing> Traceback (most recent call last):
          File "...omitted for tests only.../core.py", line...omitted for tests only..., in _to_cropped_str
            raw = print_(obj)
          File "...omitted for tests only.../dummies.py", line...omitted for tests only..., in __repr__
            raise ValueError("please don't print me")
        ValueError: please don't print me
        
  File "...omitted for tests only.../dummies.py", line...omitted for tests only..., in f
  >         return 1 // (n * 0)
  . 
  .     if True:
  .         if n % 2 == 0:
  .             return f(n - 1)
  .         else:
  .             return f(
  .                 n
  . 
  .                 - 1
  .             )
      n = 10000
      s1 = 'short string with n: 10000'
      l1 = 'long string with 0..n: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 1... 9950, 9951, 9952, 9953, 9954, 9955, 9956, 9957, 9958, 9959, 9960, 9961, 9962, 9963, 9964, 9965, 9966, 9967, 9968, 9969, 9970, 9971, 9972, 9973, 9974, 9975, 9976, 9977, 9978, 9979, 9980, 9981, 9982, 9983, 9984, 9985, 9986, 9987, 9988, 9989, 9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999'
      us = <exception while printing> Traceback (most recent call last):
          File "...omitted for tests only.../core.py", line...omitted for tests only..., in _to_cropped_str
            raw = print_(obj)
          File "...omitted for tests only.../dummies.py", line...omitted for tests only..., in __repr__
            raise ValueError("please don't print me")
        ValueError: please don't print me
        
builtins.ZeroDivisionError: integer division or modulo by zero