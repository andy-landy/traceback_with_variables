Traceback with variables (most recent call last):
  File "...omitted for tests only.../tests/test_core.py", line 106, in check
  . 
  . def test_default():
  .     check('default', 10001)
  . 
  . 
  . def test_explicit_e():
  .     try:
  .         f(10000)
  .     except Exception as e_:  # noqa
  .         e = e_
  . 
  .     assert_smart_equals_ref(f'test_core.explicit_e', core.format_exc(e=e))  # noqa
  . 
  . 
  . def test_no_e():
  .     try:
  .         f(10000)
  .     except:  # noqa
  .         pass
  . 
  .     with pytest.raises(ValueError):
  .         core.format_exc()
  . 
  . 
  . # TODO def test_after_unhandled_e():
  . 
  . 
  . def test_ellipsis():
  .     check('ellipsis', 10000, fmt=Format(ellipsis_='*'))
  . 
  . 
  . def test_max_value_str_len():
  .     check('max_value_str_len', 10000, fmt=Format(max_value_str_len=10))
  . 
  . 
  . def test_max_exc_str_len():
  .     check('max_exc_str_len', 10000, fmt=Format(max_exc_str_len=10))
  . 
  . 
  . @pytest.mark.parametrize('num_skipped_frames', [0, 1, 2])
  . def test_num_skipped_frames(num_skipped_frames):
  .     check(f'num_skipped_frames_{num_skipped_frames}', 10001, num_skipped_frames=num_skipped_frames)
  . 
  . 
  . @pytest.mark.parametrize('before', [0, 2, 100])
  . def test_before(before):
  .     check(f'before_{before}', 10000, fmt=Format(before=before))
  . 
  . 
  . @pytest.mark.parametrize('after', [0, 2, 100])
  . def test_after(after):
  .     check(f'after_{after}', 10000, fmt=Format(after=after))
  . 
  . 
  . def test_before_after():
  .     check('before_after', 10000, fmt=Format(before=2, after=2))
  . 
  . 
  . def test_color_scheme_common():
  .     check('color_scheme_common', 10000, fmt=Format(color_scheme=ColorSchemes.common))
  . 
  . 
  . def test_color_scheme_synthwave():
  .     check('color_scheme_synthwave', 10000, fmt=Format(color_scheme=ColorSchemes.synthwave))
  . 
  . 
  . def test_color_scheme_nice():
  .     check('color_scheme_nice', 10000, fmt=Format(color_scheme=ColorSchemes.nice))
  . 
  . 
  . @pytest.mark.parametrize('skip_files_except', [None, '.*dummies.*', ['.*test_core.*']])
  . @pytest.mark.parametrize('brief_files_except', [None, '.*dummies.*', ['.*test_core.*']])
  . def test_files(skip_files_except, brief_files_except):
  .     check(f'files_{skip_files_except}_{brief_files_except}', 10000, fmt=Format(
  .         skip_files_except=skip_files_except,
  .         brief_files_except=brief_files_except,
  .     ))
  . 
  . 
  . @pytest.mark.parametrize('i1,fs1', enumerate([None, ['s'], ['l', Unprintable], [lambda n, *_: 's' in n]]))
  . @pytest.mark.parametrize('i2,fs2', enumerate([None, ['s'], ['l', Unprintable], [lambda n, *_: 's' in n]]))
  . def test_var_printers(i1, fs1, i2, fs2):
  .     check(f'var_printers_{i1}_{i2}', 10, fmt=Format(
  .         custom_var_printers=([(fs1, lambda v: None)] if fs1 else []) + ([(fs2, lambda v: 'var')] if fs2 else [])
  .     ))
  . 
  . 
  . @pytest.mark.parametrize('num_skipped_frames', [0, 1])
  . def test_cur_tb(num_skipped_frames):
  .     assert_smart_equals_ref(f'test_core.cur_tb_{num_skipped_frames}', get_cur_tb(num_skipped_frames))
  . 
  . 
  . def get_cur_tb(num_skipped_frames: int) -> str:
  .     return core.format_cur_tb(num_skipped_frames=num_skipped_frames, fmt=Format(skip_files_except='test_core'))
  . 
  . 
  . def check(name, arg, **kwargs):
  .     try:
  >         f(arg)
      name = 'before_100'
      arg = 10000
      kwargs = {'fmt': <traceback_with_variables.core.Format object at 0x...omitted for tests only...>}
  File "...omitted for tests only.../tests/dummies.py", line 12, in f
  . class Unprintable:
  .     def __repr__(self):
  .         raise ValueError("please don't print me")
  . 
  . 
  . def f(n: int) -> int:
  .     s1 = 'short string with n: {}'.format(n)
  .     l1 = 'long string with 0..n: {}'.format(', '.join(map(str, range(n))))
  .     us = [Unprintable(), Unprintable(), Unprintable()]
  . 
  .     if n % 10 == 0:
  >         return 1 // (n * 0)
      n = 10000
      s1 = 'short string with n: 10000'
      l1 = 'long string with 0..n: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 2...
      us = <exception while printing> Traceback (most recent call last):
          File "...omitted for tests only.../traceback_with_variables/core.py", line 212, in _to_cropped_str
            raw = print_(obj)
          File "...omitted for tests only.../tests/dummies.py", line 3, in __repr__
            raise ValueError("please don't print me")
        ValueError: please don't print me
        
builtins.ZeroDivisionError: integer division or modulo by zero